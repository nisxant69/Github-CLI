#!/bin/bash
set -e

# Ensure we're running with bash
if [ -z "$BASH_VERSION" ]; then
    echo "Error: This script requires bash"
    exit 1
fi

NETRC_FILE="${HOME:-$(getent passwd $(id -u) | cut -d: -f6)}/.netrc"
REPO_CLI_CONFIG="$HOME/.repo-cli"

trap 'echo -e "\nOperation interrupted by user."; exit 130' SIGINT

check_dependencies() {
    local deps=("curl" "jq" "git")
    local missing=()
    for dep in "${deps[@]}"; do
        if ! command -v "$dep" >/dev/null 2>&1; then
            missing+=("$dep")
        else
            case $dep in
                "curl")
                    if ! curl --version | grep -q "^curl [7-9]"; then
                        echo "Warning: curl version 7.0.0 or higher is recommended"
                    fi
                    ;;
                "jq")
                    if ! jq --version | grep -q "^jq-[1-9]"; then
                        echo "Warning: jq version 1.0 or higher is recommended"
                    fi
                    ;;
            esac
        fi
    done
    if [ ${#missing[@]} -ne 0 ]; then
        echo "Error: Missing dependencies: ${missing[*]}"
        echo "Please install them and try again."
        exit 1
    fi
}

spinner() {
    local pid=$1
    local delay=0.1
    local spinstr='|/-\'
    printf " "
    while kill -0 $pid 2>/dev/null; do
        for ((i=0; i<${#spinstr}; i++)); do
            printf "\b${spinstr:i:1}"
            sleep $delay
        done
    done
    printf "\b"
}

usage() {
    cat <<EOF
Usage:
  repo create <repo-name> [options]     Create a repo
  repo delete <repo-name>               Delete a repo (asks confirmation)
  repo open <repo-name>                 Open repo GitHub page in browser
  repo list                            List your GitHub repositories
  repo clone [username/]repo [-d dir]   Clone repo locally
     Options for clone:
       -clean          Clone and remove .git folder
       -d directory    Target directory
  repo push                            Push local commits to remote 'main' branch
  repo help                            Show this help message

Create options:
  -d directory         Optional base directory for new repo
  -p                   Make repo private (default public)
  --desc description   Repository description
  --gitignore template .gitignore template (e.g. Node, Python)
  --license license    License template (e.g. mit, apache-2.0)
  --topics tags        Comma-separated topics
  -push                Push initial commit after creation

Examples:
  repo create MyRepo -p --desc "Private repo" --gitignore Node --license mit --topics cli,tool -d ~/projects -push
  repo delete MyRepo
  repo open MyRepo
  repo list
  repo clone nisxant69/SyncPlaylist
  repo clone -clean nisxant69/SyncPlaylist -d ~/downloads
  repo push

EOF
    exit 0
}

check_credentials() {
    if ! grep -q "machine api.github.com" "$NETRC_FILE" 2>/dev/null; then
        echo "No GitHub credentials found in ~/.netrc. Please run setup script."
        exit 1
    fi
}

check_token_scopes() {
    local response
    response=$(curl -sI --netrc -H "Accept: application/vnd.github.v3+json" https://api.github.com/user)
    if [ $? -ne 0 ]; then
        echo "Error: Failed to check token scopes. Network error?"
        return 1
    fi
    if echo "$response" | grep -q "^HTTP/[0-9\.]* 403"; then
        echo "Error: API rate limit exceeded or token invalid"
        return 1
    fi
    
    scopes=$(echo "$response" | grep -i '^x-oauth-scopes:' | cut -d' ' -f2- | tr -d '\r')
    required_scopes=("repo")
    local missing_scopes=()
    for scope in "${required_scopes[@]}"; do
        if ! echo "$scopes" | grep -qw "$scope"; then
            missing_scopes+=("$scope")
        fi
    done
    if [ ${#missing_scopes[@]} -ne 0 ]; then
        echo "Warning: Your GitHub token is missing required scope(s): ${missing_scopes[*]}"
        echo "Please update your token permissions."
    fi
}

open_url() {
    local url="$1"
    echo -n "Opening $url ..."
    
    if command -v xdg-open >/dev/null 2>&1; then
        xdg-open "$url" >/dev/null 2>&1 &
    elif command -v sensible-browser >/dev/null 2>&1; then
        sensible-browser "$url" >/dev/null 2>&1 &
    elif command -v x-www-browser >/dev/null 2>&1; then
        x-www-browser "$url" >/dev/null 2>&1 &
    elif command -v open >/dev/null 2>&1; then
        open "$url" >/dev/null 2>&1 &
    elif command -v start >/dev/null 2>&1; then
        start "$url" >/dev/null 2>&1 &
    else
        echo
        echo "Cannot open browser automatically. Open manually: $url"
        return
    fi
    
    pid=$!
    spinner $pid
    wait $pid
    echo " Done."
}

check_dependencies

if [ $# -lt 1 ]; then
    usage
fi

COMMAND="$1"
shift

if [ -f "$REPO_CLI_CONFIG" ]; then
    source "$REPO_CLI_CONFIG"
fi

github_user=${GITHUB_USER:-$(grep -A2 "machine api.github.com" "$NETRC_FILE" | grep login | awk '{print $2}')}

case "$COMMAND" in
    help)
        usage
        ;;

    delete)
        if [ $# -ne 1 ]; then
            echo "Please provide repository name to delete."
            usage
        fi
        REPO_NAME="$1"
        check_credentials
        check_token_scopes
        echo "WARNING: This will permanently delete '$github_user/$REPO_NAME'."
        read -rp "Type 'yes' to confirm: " confirm
        if [[ "$confirm" != "yes" ]]; then
            echo "Deletion cancelled."
            exit 0
        fi
        echo -n "Deleting repo '$github_user/$REPO_NAME'..."
        http_code=$(curl -s -o /dev/null -w "%{http_code}" --netrc -X DELETE "https://api.github.com/repos/$github_user/$REPO_NAME")
        if [[ "$http_code" == "204" ]]; then
            echo " Done."
            echo "Repository deleted."
        else
            echo " Failed."
            echo "HTTP code: $http_code"
            exit 1
        fi
        ;;

    open)
        if [ $# -ne 1 ]; then
            echo "Please provide repository name to open."
            usage
        fi
        REPO_NAME="$1"
        check_credentials
        repo_url="https://github.com/$github_user/$REPO_NAME"
        open_url "$repo_url"
        ;;

    list)
        check_credentials
        echo "Fetching repos for $github_user..."
        page=1
        per_page=100
        while :; do
            response=$(curl -s --netrc "https://api.github.com/user/repos?per_page=$per_page&page=$page")
            if [ $? -ne 0 ]; then
                echo "Error: Failed to fetch repositories"
                exit 1
            fi
            if echo "$response" | jq -e 'type != "array"' >/dev/null; then
                echo "Error: Invalid response from GitHub API"
                exit 1
            fi
            repo_count=$(echo "$response" | jq '. | length')
            if [[ $repo_count -eq 0 ]]; then
                break
            fi
            echo "$response" | jq -r '.[] | "\(.name) [\(.private | if . then "private" else "public" end)] - \(.description // "No description")"'
            ((page++))
        done
        ;;

    create)
        if [ $# -lt 1 ]; then
            echo "Please provide repository name to create."
            usage
        fi
        REPO_NAME="$1"
        shift
        
        # Default values
        PRIVATE="false"
        DESCRIPTION=""
        GITIGNORE=""
        LICENSE=""
        TOPICS=""
        BASE_DIR="."
        DO_PUSH=false
        
        # Parse options
        while [ $# -gt 0 ]; do
            case "$1" in
                -p)
                    PRIVATE="true"
                    ;;
                --desc)
                    shift
                    DESCRIPTION="$1"
                    ;;
                --gitignore)
                    shift
                    GITIGNORE="$1"
                    ;;
                --license)
                    shift
                    LICENSE="$1"
                    ;;
                --topics)
                    shift
                    TOPICS="$1"
                    ;;
                -d)
                    shift
                    BASE_DIR="$1"
                    ;;
                -push)
                    DO_PUSH=true
                    ;;
                *)
                    echo "Unknown option: $1"
                    usage
                    ;;
            esac
            shift
        done
        
        check_credentials
        check_token_scopes
        
        # Create repo
        echo "Creating repository '$REPO_NAME'..."
        response=$(curl -s --netrc -X POST \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/user/repos \
            -d "{
                \"name\": \"$REPO_NAME\",
                \"private\": $PRIVATE,
                \"description\": \"$DESCRIPTION\"
            }")
        
        if ! echo "$response" | jq -e '.html_url' >/dev/null; then
            echo "Error creating repository:"
            echo "$response" | jq -r '.message'
            exit 1
        fi
        
        repo_url=$(echo "$response" | jq -r '.html_url')
        clone_url=$(echo "$response" | jq -r '.clone_url')
        
        # Create local repository
        mkdir -p "$BASE_DIR"
        cd "$BASE_DIR"
        
        echo "Initializing local repository..."
        git init "$REPO_NAME"
        cd "$REPO_NAME"
        
        # Add .gitignore if specified
        if [ -n "$GITIGNORE" ]; then
            echo "Adding .gitignore template..."
            curl -s "https://raw.githubusercontent.com/github/gitignore/master/${GITIGNORE}.gitignore" -o .gitignore
        fi
        
        # Add license if specified
        if [ -n "$LICENSE" ]; then
            echo "Adding license..."
            curl -s --netrc \
                -H "Accept: application/vnd.github.v3+json" \
                "https://api.github.com/licenses/$LICENSE" | jq -r '.body' > LICENSE
        fi
        
        # Add README.md
        echo "# $REPO_NAME" > README.md
        [ -n "$DESCRIPTION" ] && echo -e "\n$DESCRIPTION" >> README.md
        
        # Initialize repository
        git add .
        git commit -m "Initial commit"
        git branch -M main
        git remote add origin "$clone_url"
        
        # Push if requested
        if [ "$DO_PUSH" = true ]; then
            echo "Pushing to remote repository..."
            git push -u origin main
        fi
        
        # Add topics if specified
        if [ -n "$TOPICS" ]; then
            echo "Adding topics..."
            curl -s --netrc -X PUT \
                -H "Accept: application/vnd.github.mercy-preview+json" \
                "https://api.github.com/repos/$github_user/$REPO_NAME/topics" \
                -d "{\"names\": [$(echo $TOPICS | sed 's/,/","/g' | sed 's/\([^"]\)/"\1/;s/\([^"]\)$/\1"/')]}}" > /dev/null
        fi
        
        echo "✅ Repository created successfully!"
        echo "🌐 URL: $repo_url"
        echo "📂 Local path: $(pwd)"
        ;;

    clone)
        if [ $# -lt 1 ]; then
            echo "Please provide repository to clone."
            usage
        fi
        
        REPO="$1"
        shift
        TARGET_DIR=""
        CLEAN=false
        
        # Parse options
        while [ $# -gt 0 ]; do
            case "$1" in
                -clean)
                    CLEAN=true
                    ;;
                -d)
                    shift
                    TARGET_DIR="$1"
                    ;;
                *)
                    echo "Unknown option: $1"
                    usage
                    ;;
            esac
            shift
        done
        
        # If repo doesn't contain '/', assume it's the current user's repo
        if [[ "$REPO" != *"/"* ]]; then
            REPO="$github_user/$REPO"
        fi
        
        # Set target directory if not specified
        if [ -z "$TARGET_DIR" ]; then
            TARGET_DIR="${REPO##*/}"
        fi
        
        echo "Cloning $REPO into $TARGET_DIR..."
        if [ "$CLEAN" = true ]; then
            git clone "https://github.com/$REPO" "$TARGET_DIR" && rm -rf "$TARGET_DIR/.git"
            echo "Repository cloned and git history removed."
        else
            git clone "https://github.com/$REPO" "$TARGET_DIR"
            echo "Repository cloned successfully."
        fi
        ;;

    push)
        if ! git rev-parse --git-dir > /dev/null 2>&1; then
            echo "Error: Not in a git repository"
            exit 1
        fi
        
        current_branch=$(git symbolic-ref --short HEAD)
        if [ "$current_branch" != "main" ]; then
            echo "Warning: You are not on the 'main' branch (current: $current_branch)"
            read -rp "Do you want to push anyway? [y/N] " response
            if [[ ! "$response" =~ ^[Yy]$ ]]; then
                echo "Push cancelled."
                exit 0
            fi
        fi
        
        echo "Pushing to remote repository..."
        if ! git push origin "$current_branch"; then
            echo "Error: Push failed"
            exit 1
        fi
        echo "Push successful!"
        ;;

    *)
        echo "Unknown command: $COMMAND"
        usage
        ;;
esac
