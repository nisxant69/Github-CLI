#!/bin/bash
set -e

# Ensure we're running with bash
if [ -z "$BASH_VERSION" ]; then
    echo "Error: This script requires bash"
    exit 1
fi

NETRC_FILE="${HOME:-$(getent passwd "$(id -u)" | cut -d: -f6)}/.netrc"
REPO_CLI_CONFIG="$HOME/.repo-cli"
DEBUG=${DEBUG:-false}

trap 'echo -e "\nOperation interrupted by user."; exit 130' SIGINT

debug_log() {
    if [ "$DEBUG" = true ]; then
        echo "[DEBUG] $*" >&2
    fi
}

# Improved version comparison function
version_compare() {
    local version="$1"
    local required="$2"
    printf '%s\n%s\n' "$version" "$required" | sort -V | head -n1
}

check_dependencies() {
    local deps=("curl" "jq" "git")
    local missing=()
    
    for dep in "${deps[@]}"; do
        if ! command -v "$dep" >/dev/null 2>&1; then
            missing+=("$dep")
        else
            case $dep in
                "curl")
                    local curl_version
                    curl_version=$(curl --version 2>/dev/null | head -n1 | sed 's/curl \([0-9.]*\).*/\1/' || echo "0.0.0")
                    if [ -n "$curl_version" ]; then
                        if [ "$(version_compare "$curl_version" "7.0.0")" != "7.0.0" ]; then
                            echo "Warning: curl version 7.0.0 or higher is recommended (found: $curl_version)"
                        fi
                    fi
                    ;;
                "jq")
                    local jq_version
                    jq_version=$(jq --version 2>/dev/null | sed 's/jq-\([0-9.]*\).*/\1/' || echo "0.0.0")
                    if [ -n "$jq_version" ]; then
                        if [ "$(version_compare "$jq_version" "1.0.0")" != "1.0.0" ]; then
                            echo "Warning: jq version 1.0 or higher is recommended (found: $jq_version)"
                        fi
                    fi
                    ;;
            esac
        fi
    done
    
    if [ ${#missing[@]} -ne 0 ]; then
        echo "Error: Missing dependencies: ${missing[*]}"
        echo "Please install them and try again."
        exit 1
    fi
}

spinner() {
    local pid=$1
    local delay=0.1
    local spinstr='|/-\\'
    printf " "
    while kill -0 "$pid" 2>/dev/null; do
        for ((i=0; i<"${#spinstr}"; i++)); do
            printf "\b${spinstr:i:1}"
            sleep $delay
        done
    done
    printf "\b"
}

usage() {
    cat <<EOF
Usage:
  repo setup                           Set up GitHub authentication
  repo create <repo-name> [options]    Create a repo
  repo delete <repo-name>              Delete a repo (asks confirmation)
  repo open <repo-name>                Open repo GitHub page in browser
  repo list                           List your GitHub repositories
  repo clone [username/]repo [-d dir]  Clone repo locally
     Options for clone:
       -clean          Clone and remove .git folder
       -d directory    Target directory
  repo push                           Push local commits to remote 'main' branch
  repo help                           Show this help message

Create options:
  -d directory         Optional base directory for new repo
  -p                   Make repo private (default public)
  --desc description   Repository description
  --gitignore template .gitignore template (e.g. Node, Python)
  --license license    License template (e.g. mit, apache-2.0)
  --topics tags        Comma-separated topics
  -push                Push initial commit after creation

Examples:
  repo setup                                                                      # First-time authentication setup
  repo create MyRepo -p --desc "Private repo" --gitignore Node --license mit --topics cli,tool -d ~/projects -push
  repo delete MyRepo
  repo open MyRepo
  repo list
  repo clone nisxant69/SyncPlaylist
  repo clone -clean nisxant69/SyncPlaylist -d ~/downloads
  repo push

EOF
    exit 0
}

# Input sanitization function
sanitize_input() {
    local input="$1"
    # Remove potentially dangerous characters for shell/URL contexts
    echo "$input" | sed 's/[;&|`$(){}[\]\\]//g'
}

# Safe API call function
safe_api_call() {
    local url="$1"
    local method="${2:-GET}"
    local data="${3:-}"
    local response
    local http_code
    
    debug_log "Making API call: $method $url"
    
    if [ -n "$data" ]; then
        response=$(curl -s -w "\n%{http_code}" --netrc -X "$method" \
            -H "Accept: application/vnd.github.v3+json" \
            -H "Content-Type: application/json" \
            "$url" -d "$data")
    else
        response=$(curl -s -w "\n%{http_code}" --netrc -X "$method" \
            -H "Accept: application/vnd.github.v3+json" \
            "$url")
    fi
    
    local curl_exit_code=$?
    if [ $curl_exit_code -ne 0 ]; then
        echo "Error: Network request failed (curl exit code: $curl_exit_code)"
        return 1
    fi
    
    http_code=$(echo "$response" | tail -n1)
    response=$(echo "$response" | head -n -1)
    
    debug_log "HTTP response code: $http_code"
    
    case $http_code in
        200|201|204)
            echo "$response"
            return 0
            ;;
        401)
            echo "Error: Unauthorized. Please check your GitHub token."
            return 1
            ;;
        403)
            echo "Error: Forbidden. API rate limit exceeded or insufficient permissions."
            return 1
            ;;
        404)
            echo "Error: Not found. Repository or resource doesn't exist."
            return 1
            ;;
        422)
            echo "Error: Validation failed."
            if command -v jq >/dev/null 2>&1; then
                echo "$response" | jq -r '.message // "Unknown validation error"'
            else
                echo "$response"
            fi
            return 1
            ;;
        *)
            echo "Error: HTTP $http_code"
            echo "$response"
            return 1
            ;;
    esac
}

check_credentials() {
    if ! grep -q "machine api.github.com" "$NETRC_FILE" 2>/dev/null; then
        echo "üîê GitHub credentials not found. Let's set them up!"
        echo ""
        setup_credentials
    fi
}

setup_credentials() {
    echo "To use this GitHub CLI tool, you need a Personal Access Token (PAT)."
    echo ""
    echo "üìã Follow these steps:"
    echo "1. Go to: https://github.com/settings/tokens"
    echo "2. Click 'Generate new token (classic)'"
    echo "3. Give it a name like 'GitHub CLI Tool'"
    echo "4. Select the 'repo' scope (full control of private repositories)"
    echo "5. Click 'Generate token'"
    echo "6. Copy the generated token"
    echo ""
    
    # Open GitHub token page if possible
    echo "üåê Opening GitHub token settings page..."
    open_url "https://github.com/settings/tokens"
    echo ""
    
    # Get username with validation
    local github_username
    while true; do
        echo -n "Enter your GitHub username: "
        read -r github_username
        github_username=$(sanitize_input "$github_username")
        if [ -n "$github_username" ] && [[ "$github_username" =~ ^[a-zA-Z0-9]([a-zA-Z0-9-]{0,37}[a-zA-Z0-9])?$ ]]; then
            break
        fi
        echo "Invalid username. GitHub usernames must be 1-39 characters, alphanumeric or hyphens, and cannot start/end with hyphens."
    done
    
    # Get token with validation
    local github_token
    while true; do
        echo -n "Enter your GitHub Personal Access Token: "
        read -r -s github_token
        echo ""
        github_token=$(sanitize_input "$github_token")
        if [ -n "$github_token" ] && [ ${#github_token} -ge 20 ]; then
            break
        fi
        echo "Invalid token. GitHub tokens are typically 40+ characters long."
    done
    
    # Verify credentials
    echo ""
    echo "üîç Verifying credentials..."
    
    # Create temporary netrc for testing
    local temp_netrc
    temp_netrc=$(mktemp)
    trap 'rm -f "$temp_netrc"' EXIT
    
    {
        echo "machine api.github.com"
        echo "  login $github_username"
        echo "  password $github_token"
    } > "$temp_netrc"
    chmod 600 "$temp_netrc"
    
    # Test credentials
    local test_response
    test_response=$(curl -s --netrc-file "$temp_netrc" -H "Accept: application/vnd.github.v3+json" https://api.github.com/user 2>/dev/null)
    local curl_exit_code=$?
    
    if [ $curl_exit_code -ne 0 ]; then
        echo "‚ùå Network error. Please check your internet connection."
        exit 1
    fi
    
    if echo "$test_response" | jq -e '.login' >/dev/null 2>&1; then
        local api_username
        api_username=$(echo "$test_response" | jq -r '.login')
        if [ "$api_username" != "$github_username" ]; then
            echo "‚ö†Ô∏è Warning: The token belongs to user '$api_username', not '$github_username'"
            echo -n "Continue anyway? (y/N): "
            read -r continue_choice
            if [[ ! "$continue_choice" =~ ^[Yy]$ ]]; then
                echo "Setup cancelled."
                exit 1
            fi
            github_username="$api_username"
        fi
        echo "‚úÖ Credentials verified for user: $github_username"
    else
        echo "‚ùå Invalid credentials. Please check your username and token."
        echo ""
        echo "Common issues:"
        echo "‚Ä¢ Make sure the token has 'repo' scope"
        echo "‚Ä¢ Check that the token hasn't expired"
        echo "‚Ä¢ Verify you copied the token correctly"
        exit 1
    fi
    
    # Create .netrc file atomically
    echo ""
    echo "üíæ Saving credentials..."
    
    # Backup existing .netrc if it exists
    if [ -f "$NETRC_FILE" ]; then
        local backup_file="$NETRC_FILE.backup.$(date +%Y%m%d_%H%M%S)"
        cp "$NETRC_FILE" "$backup_file"
        chmod 600 "$backup_file"
        echo "üìã Backed up existing .netrc file to $backup_file"
    fi
    
    # Create directory if it doesn't exist
    mkdir -p "$(dirname "$NETRC_FILE")"
    
    # Create new temporary netrc and move it atomically
    local final_netrc
    final_netrc=$(mktemp)
    
    {
        # Preserve existing entries if they exist
        if [ -f "$NETRC_FILE" ]; then
            grep -v "machine api.github.com" "$NETRC_FILE" 2>/dev/null || true
        fi
        echo "machine api.github.com"
        echo "  login $github_username"
        echo "  password $github_token"
        echo ""
    } > "$final_netrc"
    
    # Set secure permissions and move
    chmod 600 "$final_netrc"
    mv "$final_netrc" "$NETRC_FILE"
    
    # Save username to config
    echo "GITHUB_USER=\"$github_username\"" > "$REPO_CLI_CONFIG"
    chmod 600 "$REPO_CLI_CONFIG"
    
    echo "‚úÖ Setup complete!"
    echo ""
    echo "üéâ You can now use all repo commands:"
    echo "  repo list              # List your repositories"
    echo "  repo create <name>     # Create a new repository"
    echo "  repo clone <repo>      # Clone a repository"
    echo ""
}

check_token_scopes() {
    local response
    response=$(curl -sI --netrc -H "Accept: application/vnd.github.v3+json" https://api.github.com/user 2>/dev/null)
    local curl_exit_code=$?
    
    if [ $curl_exit_code -ne 0 ]; then
        echo "Error: Failed to check token scopes. Network error?"
        return 1
    fi
    
    if echo "$response" | grep -q "^HTTP/[0-9.]* 403"; then
        echo "Error: API rate limit exceeded or token invalid"
        return 1
    fi
    
    if echo "$response" | grep -q "^HTTP/[0-9.]* 401"; then
        echo "Error: Invalid or expired token"
        return 1
    fi
    
    local scopes
    scopes=$(echo "$response" | grep -i '^x-oauth-scopes:' | cut -d' ' -f2- | tr -d '\r\n' || echo "")
    local required_scopes=("repo")
    local missing_scopes=()
    
    for scope in "${required_scopes[@]}"; do
        if ! echo "$scopes" | grep -qw "$scope"; then
            missing_scopes+=("$scope")
        fi
    done
    
    if [ ${#missing_scopes[@]} -ne 0 ]; then
        echo "Warning: Your GitHub token is missing required scope(s): ${missing_scopes[*]}"
        echo "Available scopes: $scopes"
        echo "Please update your token permissions."
    fi
}

open_url() {
    local url="$1"
    echo -n "Opening $url ..."
    
    local browser_cmd=""
    if command -v xdg-open >/dev/null 2>&1; then
        browser_cmd="xdg-open"
    elif command -v sensible-browser >/dev/null 2>&1; then
        browser_cmd="sensible-browser"
    elif command -v x-www-browser >/dev/null 2>&1; then
        browser_cmd="x-www-browser"
    elif command -v open >/dev/null 2>&1; then
        browser_cmd="open"
    elif command -v start >/dev/null 2>&1; then
        browser_cmd="start"
    else
        echo
        echo "Cannot open browser automatically. Open manually: $url"
        return
    fi
    
    $browser_cmd "$url" >/dev/null 2>&1 &
    local pid=$!
    spinner $pid
    wait $pid
    echo " Done."
}

check_dependencies

validate_repo_name() {
    local name="$1"
    if [[ ! "$name" =~ ^[a-zA-Z0-9._-]+$ ]]; then
        echo "Error: Invalid repository name. Only letters, numbers, dots, hyphens, and underscores are allowed."
        return 1
    fi
    if [ ${#name} -gt 100 ]; then
        echo "Error: Repository name is too long (max 100 characters)."
        return 1
    fi
    if [[ "$name" =~ ^[.-] ]] || [[ "$name" =~ [.-]$ ]]; then
        echo "Error: Repository name cannot start or end with a dot or hyphen."
        return 1
    fi
    return 0
}

if [ $# -lt 1 ]; then
    usage
fi

COMMAND="$1"
shift

if [ -f "$REPO_CLI_CONFIG" ]; then
    source "$REPO_CLI_CONFIG"
fi

github_user=${GITHUB_USER:-$(grep -A2 "machine api.github.com" "$NETRC_FILE" 2>/dev/null | grep login | awk '{print $2}' || echo "")}

case "$COMMAND" in
    help)
        usage
        ;;

    setup)
        echo "üîß Setting up GitHub CLI authentication..."
        echo ""
        setup_credentials
        ;;

    delete)
        if [ $# -ne 1 ]; then
            echo "Please provide repository name to delete."
            usage
        fi
        REPO_NAME=$(sanitize_input "$1")
        if ! validate_repo_name "$REPO_NAME"; then
            exit 1
        fi
        
        check_credentials
        check_token_scopes
        
        echo "WARNING: This will permanently delete '$github_user/$REPO_NAME'."
        read -rp "Type 'yes' to confirm: " confirm
        if [[ "$confirm" != "yes" ]]; then
            echo "Deletion cancelled."
            exit 0
        fi
        
        echo -n "Deleting repo '$github_user/$REPO_NAME'..."
        if safe_api_call "https://api.github.com/repos/$github_user/$REPO_NAME" "DELETE" >/dev/null; then
            echo " Done."
            echo "Repository deleted."
        else
            echo " Failed."
            exit 1
        fi
        ;;

    open)
        if [ $# -ne 1 ]; then
            echo "Please provide repository name to open."
            usage
        fi
        REPO_NAME=$(sanitize_input "$1")
        if ! validate_repo_name "$REPO_NAME"; then
            exit 1
        fi
        
        check_credentials
        repo_url="https://github.com/$github_user/$REPO_NAME"
        open_url "$repo_url"
        ;;

    list)
        check_credentials
        echo "Fetching repos for $github_user..."
        local page=1
        local per_page=100
        
        while :; do
            local response
            response=$(safe_api_call "https://api.github.com/user/repos?per_page=$per_page&page=$page")
            if [ $? -ne 0 ]; then
                echo "Error: Failed to fetch repositories for user '$github_user'"
                exit 1
            fi
            
            if ! echo "$response" | jq -e 'type == "array"' >/dev/null 2>&1; then
                echo "Error: Invalid response from GitHub API"
                exit 1
            fi
            
            local repo_count
            repo_count=$(echo "$response" | jq '. | length')
            if [[ $repo_count -eq 0 ]]; then
                break
            fi
            
            echo "$response" | jq -r '.[] | "\(.name) [\(.private | if . then "private" else "public" end)] - \(.description // "No description")"'
            ((page++))
        done
        ;;

    create)
        if [ $# -lt 1 ]; then
            echo "Please provide repository name to create."
            usage
        fi
        REPO_NAME=$(sanitize_input "$1")
        
        # Validate repository name
        if ! validate_repo_name "$REPO_NAME"; then
            exit 1
        fi
        
        shift
        
        # Default values
        PRIVATE="false"
        DESCRIPTION=""
        GITIGNORE=""
        LICENSE=""
        TOPICS=""
        BASE_DIR="."
        DO_PUSH=false
        
        # Parse options
        while [ $# -gt 0 ]; do
            case "$1" in
                -p)
                    PRIVATE="true"
                    ;;
                --desc)
                    shift
                    DESCRIPTION=$(sanitize_input "$1")
                    ;;
                --gitignore)
                    shift
                    GITIGNORE=$(sanitize_input "$1")
                    ;;
                --license)
                    shift
                    LICENSE=$(sanitize_input "$1")
                    ;;
                --topics)
                    shift
                    TOPICS=$(sanitize_input "$1")
                    ;;
                -d)
                    shift
                    BASE_DIR="$1"
                    # Validate directory path
                    if [[ "$BASE_DIR" =~ \.\. ]] || [[ "$BASE_DIR" =~ ^/ ]]; then
                        echo "Error: Invalid directory path"
                        exit 1
                    fi
                    ;;
                -push)
                    DO_PUSH=true
                    ;;
                *)
                    echo "Unknown option: $1"
                    usage
                    ;;
            esac
            shift
        done
        
        check_credentials
        check_token_scopes
        
        # Create repo
        echo "Creating repository '$REPO_NAME'..."
        
        # Properly construct JSON payload
        local json_payload
        json_payload=$(jq -n \
            --arg name "$REPO_NAME" \
            --argjson private "$PRIVATE" \
            --arg description "$DESCRIPTION" \
            '{name: $name, private: $private, description: $description}')
        
        local response
        response=$(safe_api_call "https://api.github.com/user/repos" "POST" "$json_payload")
        if [ $? -ne 0 ]; then
            echo "Error creating repository"
            exit 1
        fi
        
        local repo_url clone_url
        repo_url=$(echo "$response" | jq -r '.html_url')
        clone_url=$(echo "$response" | jq -r '.clone_url')
        
        # Create local repository
        if [ ! -d "$BASE_DIR" ]; then
            mkdir -p "$BASE_DIR"
        fi
        cd "$BASE_DIR"
        
        echo "Initializing local repository..."
        git init "$REPO_NAME"
        cd "$REPO_NAME"
        
        # Add .gitignore if specified
        if [ -n "$GITIGNORE" ]; then
            echo "Adding .gitignore template..."
            if ! curl -s "https://raw.githubusercontent.com/github/gitignore/master/${GITIGNORE}.gitignore" -o .gitignore; then
                echo "Warning: Failed to download .gitignore template for $GITIGNORE"
                rm -f .gitignore
            elif [ ! -s .gitignore ]; then
                echo "Warning: .gitignore template '$GITIGNORE' not found"
                rm -f .gitignore
            fi
        fi
        
        # Add license if specified
        if [ -n "$LICENSE" ]; then
            echo "Adding license..."
            local license_response
            license_response=$(safe_api_call "https://api.github.com/licenses/$LICENSE")
            
            if [ $? -eq 0 ] && echo "$license_response" | jq -e '.body' >/dev/null 2>&1; then
                echo "$license_response" | jq -r '.body' > LICENSE
            else
                echo "Warning: Failed to download license template for '$LICENSE'"
            fi
        fi
        
        # Add README.md
        echo "# $REPO_NAME" > README.md
        [ -n "$DESCRIPTION" ] && echo -e "\n$DESCRIPTION" >> README.md
        
        # Initialize repository
        git add .
        git commit -m "Initial commit"
        
        # Get default branch name from git config or use main
        local default_branch current_branch
        default_branch=$(git config --get init.defaultBranch 2>/dev/null || echo "main")
        current_branch=$(git symbolic-ref --short HEAD)
        
        if [ "$current_branch" != "$default_branch" ]; then
            git branch -M "$default_branch"
        fi
        
        git remote add origin "$clone_url"
        
        # Push if requested
        if [ "$DO_PUSH" = true ]; then
            echo "Pushing to remote repository..."
            if ! git push -u origin "$default_branch"; then
                echo "Warning: Failed to push to remote repository"
            fi
        fi
        
        # Add topics if specified
        if [ -n "$TOPICS" ]; then
            echo "Adding topics..."
            # Use jq to properly construct JSON array
            local topics_json
            topics_json=$(echo "$TOPICS" | jq -R 'split(",") | map(select(. != "") | gsub("[^a-zA-Z0-9-]"; ""))')
            local topics_payload
            topics_payload=$(jq -n --argjson topics "$topics_json" '{names: $topics}')
            
            safe_api_call "https://api.github.com/repos/$github_user/$REPO_NAME/topics" "PUT" "$topics_payload" >/dev/null
        fi
        
        echo "‚úÖ Repository created successfully!"
        echo "üåê URL: $repo_url"
        echo "üìÇ Local path: $(pwd)"
        ;;

    clone)
        if [ $# -lt 1 ]; then
            echo "Please provide repository to clone."
            usage
        fi
        
        REPO=$(sanitize_input "$1")
        shift
        TARGET_DIR=""
        CLEAN=false
        
        # Parse options
        while [ $# -gt 0 ]; do
            case "$1" in
                -clean)
                    CLEAN=true
                    ;;
                -d)
                    shift
                    TARGET_DIR="$1"
                    ;;
                *)
                    echo "Unknown option: $1"
                    usage
                    ;;
            esac
            shift
        done
        
        # If repo doesn't contain '/', assume it's the current user's repo
        if [[ "$REPO" != *"/"* ]]; then
            REPO="$github_user/$REPO"
        fi
        
        # Validate repo format
        if [[ ! "$REPO" =~ ^[a-zA-Z0-9._-]+/[a-zA-Z0-9._-]+$ ]]; then
            echo "Error: Invalid repository format. Use 'username/repository'"
            exit 1
        fi
        
        # Set target directory if not specified
        if [ -z "$TARGET_DIR" ]; then
            TARGET_DIR="${REPO##*/}"
        fi
        
        # Validate target directory
        if [ -e "$TARGET_DIR" ]; then
            echo "Error: Directory '$TARGET_DIR' already exists"
            exit 1
        fi
        
        echo "Cloning $REPO into $TARGET_DIR..."
        if [ "$CLEAN" = true ]; then
            if git clone "https://github.com/$REPO" "$TARGET_DIR"; then
                rm -rf "$TARGET_DIR/.git"
                echo "Repository cloned and git history removed."
            else
                echo "Error: Failed to clone repository"
                exit 1
            fi
        else
            if git clone "https://github.com/$REPO" "$TARGET_DIR"; then
                echo "Repository cloned successfully."
            else
                echo "Error: Failed to clone repository"
                exit 1
            fi
        fi
        ;;

    push)
        if ! git rev-parse --git-dir > /dev/null 2>&1; then
            echo "Error: Not in a git repository"
            exit 1
        fi
        
        # Check if there are any remotes
        if ! git remote | grep -q .; then
            echo "Error: No remote repositories configured"
            exit 1
        fi
        
        # Check for uncommitted changes
        if ! git diff --quiet || ! git diff --cached --quiet; then
            echo "Error: You have uncommitted changes. Please commit or stash them first."
            exit 1
        fi
        
        local current_branch default_branch
        current_branch=$(git symbolic-ref --short HEAD 2>/dev/null || git rev-parse --short HEAD)
        default_branch=$(git config --get init.defaultBranch 2>/dev/null || echo "main")
        
        if [ "$current_branch" != "$default_branch" ] && [ "$current_branch" != "master" ]; then
            echo "Warning: You are not on the default branch (current: $current_branch)"
            read -rp "Do you want to push anyway? [y/N] " response
            if [[ ! "$response" =~ ^[Yy]$ ]]; then
                echo "Push cancelled."
                exit 0
            fi
        fi
        
        echo "Pushing to remote repository..."
        if ! git push origin "$current_branch"; then
            echo "Error: Push failed"
            exit 1
        fi
        echo "Push successful!"
        ;;

    *)
        echo "Unknown command: $COMMAND"
        usage
        ;;
esac